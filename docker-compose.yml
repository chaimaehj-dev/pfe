version: "3.8"

services:
  # Grafana: For visualizing logs and metrics.
  grafana:
    container_name: grafana
    image: grafana/grafana:11.0.0 # Pin the image version for stability
    ports:
      - "${GRAFANA_PORT}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_AUTH_ANONYMOUS_ENABLED=false # Disable anonymous access
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    volumes:
      - grafana-storage:/var/lib/grafana
    networks:
      - monitoring
    restart: unless-stopped # Ensure Grafana restarts if it crashes
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Loki: For storing logs.
  loki:
    container_name: loki
    image: grafana/loki:3.4.0
    ports:
      - "3100:3100"
    volumes:
      - ./loki-config.yml:/etc/loki/local-config.yml
    command: -config.file=/etc/loki/local-config.yml
    networks:
      - monitoring
    restart: unless-stopped # Ensure Loki restarts if it crashes
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Prometheus: For storing metrics.
  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.44.0 # Pin to a stable version
    ports:
      - "${PROMETHEUS_PORT}:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-storage:/prometheus
    networks:
      - monitoring

  # OpenTelemetry Collector: For collecting traces and exporting them.
  otel-collector:
    container_name: otel-collector
    image: otel/opentelemetry-collector:0.123.0
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./otel-collector-config.yml:/etc/otel-collector-config.yml
    ports:
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP HTTP receiver
      - "8888:8888" # Prometheus metrics exposed by collector
      - "8889:8889" # Prometheus exporter metrics
      - "13133:13133" # Health check extension
      - "55679:55679" # zPages extension
    networks:
      - monitoring
    restart: unless-stopped # Ensure OTEL collector restarts if it crashes
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:13133/healthz"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Zipkin: For tracing.
  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin:2.23.0 # Pin to a stable version
    ports:
      - "9411:9411"
    networks:
      - monitoring
    restart: unless-stopped # Ensure Zipkin restarts if it crashes
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9411/health"]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  monitoring:
    name: monitoring
    driver: bridge

volumes:
  grafana-storage:
    name: grafana_data
  prometheus-storage:
    name: prometheus_data
