generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  SUPPORT
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  name          String
  firstName     String
  lastName      String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  phoneNumber   String?
  role          UserRole  @default(USER)

  accounts Account[] @relation("UserAccounts")
  sessions Session[] @relation("UserSessions")
  instructorProfile InstructorProfile? @relation("UserInstructorProfile")
  ownedCourses  UserCourse[]    @relation("UserCourses")
  cart          Cart?             @relation("UserCart")
  payments PaymentDetails[]  @relation("PaymentDetailsToUser")
  orders            Order[]           @relation("UserOrders")
  reviews           Review[]          @relation("ReviewToUser")
  lectureProgress UserLectureProgress[]
  quizProgress    UserQuizProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InstructorProfile {
  id        String   @id @default(cuid())
  bio       String?
  website   String?

  userId    String   @unique
  user      User     @relation("UserInstructorProfile", fields: [userId], references: [id], onDelete: Cascade)

  socialLinks SocialLinks? @relation("InstructorProfileSocialLinks")
  courses   Course[] @relation("InstructorCourses") 


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SocialLinks {
  id                String   @id @default(cuid())
  instructorProfileId String   @unique
  twitter           String?
  linkedin          String?
  youtube           String?
  facebook          String?
  instagram         String?
  github            String?

  instructorProfile InstructorProfile @relation("InstructorProfileSocialLinks", fields: [instructorProfileId], references: [id], onDelete: Cascade)

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}


model Account {
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  userId String
  user   User   @relation("UserAccounts", fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  expires      DateTime

  userId String
  user   User   @relation("UserSessions", fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([identifier, token])
}


model ResetPasswordToken {
  id         String @id @default(cuid())
  email      String
  token      String @unique
  expires    DateTime

  @@unique([email, token])
}

model Category {
  id          String       @id @default(cuid())
  name        String       @unique
  url        String       @unique

  subcategories Subcategory[] @relation("CategorySubcategories")
  courses     Course[]      @relation("CourseCategory") 

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Subcategory {
  id          String       @id @default(cuid())
  name        String
  url        String       @unique
  
  categoryId  String
  category    Category     @relation("CategorySubcategories", fields: [categoryId], references: [id], onDelete: Cascade)
  
  courses     Course[]     @relation("CourseSubcategory")
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([categoryId, name])
}



model Course {
  id              String         @id @default(cuid())
  title           String
  subtitle        String?
  description     String? @db.Text
  slug            String         @unique
  price           Float?          @default(0.0)
  thumbnail       String?
  promotionalVideo String?
  status          CourseStatus   @default(DRAFT)
  difficultyLevel DifficultyLevel @default(BEGINNER)
  intendedLearners String[]  
  prerequisites   String[]  
  objectives      String[]  
  duration        Float          @default(0)
  welcomeMessage  String?
  congratulationsMessage String?
  rating            Float             @default(0)
  numReviews        Int               @default(0)
  numLectures        Int               @default(0)

  instructorProfile InstructorProfile @relation("InstructorCourses", fields: [instructorProfileId], references: [id])
  instructorProfileId String

  category        Category       @relation("CourseCategory", fields: [categoryId], references: [id])
  categoryId      String

  subcategory     Subcategory?    @relation("CourseSubcategory", fields: [subcategoryId], references: [id])
  subcategoryId   String?

  language        Language?       @relation("CourseLanguage", fields: [languageId], references: [id])
  languageId      String?

  sections        Section[] @relation("CourseSections")

  users           UserCourse[] @relation("UserCourses")
  cartItems       CartItem[] @relation("CourseToCartItem")
  reviews   Review[]         @relation("ReviewToCourse")
  userProgress UserLectureProgress[]
  quizProgress UserQuizProgress[]

  
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model UserCourse {
  id         String  @id @default(cuid())
  userId     String
  user       User    @relation("UserCourses", fields: [userId], references: [id], onDelete: Cascade)
  courseId   String
  course     Course  @relation("UserCourses", fields: [courseId], references: [id], onDelete: Cascade)
  purchasedAt DateTime @default(now())
  completed   Boolean  @default(false)
  completedAt DateTime?
  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}


model Section {
  id        String    @id @default(cuid())
  title     String
  description     String?
  course    Course    @relation("CourseSections", fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  lectures  Lecture[] @relation("SectionLectures")
  order     Int       
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
enum LectureType {
  VIDEO
  QUIZ
  EXERCISE
}

model Lecture {
  id          String      @id @default(cuid())
  title       String
  description String?
  section     Section     @relation("SectionLectures", fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId   String
  order       Int
  type        LectureType  

  // Optional 1:1 relations to type-specific models
  videoLecture    VideoLecture?
  quizLecture     QuizLecture?
  exerciseLecture ExerciseLecture?

  userProgress    UserLectureProgress[]
  quizProgress    UserQuizProgress[]

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}
model VideoLecture {
  id          String    @id @default(cuid())
  lecture     Lecture   @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  lectureId   String    @unique
  videoUrl    String
  videoName    String
  duration    Int?
  
  subtitles   String[]  // Array of subtitle URLs
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model QuizLecture {
  id          String    @id @default(cuid())
  lecture     Lecture   @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  lectureId   String    @unique
  questions   Question[] // Array of structured questions
  passingScore Int?

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}
model Question {
  id           String    @id @default(cuid())
  quizLecture  QuizLecture @relation(fields: [quizLectureId], references: [id], onDelete: Cascade)
  quizLectureId String
  question     String    
  options      String[]  
  correctIndex Int       
  explanation  String?   
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model ExerciseLecture {
  id          String    @id @default(cuid())
  lecture     Lecture   @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  lectureId   String    @unique
  instructions String
  solution    String?   // Optional solution or answer key

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}
enum CourseStatus {
  DRAFT
  SUBMITTED
  PUBLISHED
  ARCHIVED
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
  ALL
}

model Language {
  id          String   @id @default(cuid())
  code        String   @unique 
  name        String   @unique 
  native      String   @unique 
  courses     Course[] @relation("CourseLanguage")

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Cart {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation("UserCart", fields: [userId], references: [id], onDelete: Cascade)

  cartItems    CartItem[] @relation("CartToCartItem")
  total        Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}


model CartItem {
  id          String @id @default(uuid())

  courseId   String
  course   Course   @relation("CourseToCartItem", fields: [courseId], references: [id], onDelete: Cascade)


  cartId String
  cart   Cart   @relation("CartToCartItem", fields: [cartId], references: [id], onDelete: Cascade)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cartId])
}

enum PaymentStatus {
  Pending
  Paid
  Failed
  Declined
  Cancelled
  Refunded
  PartiallyRefunded
  Chargeback
}

enum PaymentMethod {
  Paypal
  Stripe
}

model Order {
  id           String @id @default(uuid())
  total        Float

  paymentStatus PaymentStatus @default(Pending)
  items OrderItem[] @relation("OrderItemToOrder")

  paymentMethod  PaymentMethod?
  paymentDetails PaymentDetails? @relation("PaymentDetailsToOrder")

  userId String
  user   User   @relation("UserOrders", fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model OrderItem {
  id String @id @default(uuid())

  courseId String

  courseSlug String
  title        String
  thumbnail        String
  price       Float

  orderId String
  order   Order @relation("OrderItemToOrder", fields: [orderId], references: [id], onDelete: Cascade)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model PaymentDetails {
  
  id String @id @default(uuid())

  paymentInetntId String
  paymentMethod String
  status String
  amount Float
  currency String

  orderId String @unique
  order Order @relation("PaymentDetailsToOrder",fields: [orderId],references: [id],onDelete: Cascade) 

  userId String
  user User @relation("PaymentDetailsToUser",fields: [userId],references: [id],onDelete: Cascade)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([userId])
}

model Review {
  id       String @id @default(uuid())
  review   String
  rating   Float

  userId String
  user   User   @relation("ReviewToUser", fields: [userId], references: [id])

  courseId String
  course   Course @relation("ReviewToCourse", fields: [courseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId])
}

model UserLectureProgress {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  lectureId String
  lecture   Lecture  @relation(fields: [lectureId], references: [id])
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  progress  Float    @default(0)
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lectureId])
}

model UserQuizProgress {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  lectureId String
  lecture   Lecture  @relation(fields: [lectureId], references: [id])
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  score     Int
  answers   Json
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lectureId])
}